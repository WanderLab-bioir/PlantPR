{
  "hash": "45ccefb944ff54ff1d6989f36af1d17b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nexecute: \n  echo: true\n  eval: false\n  warning: false\n---\n\n\n# Statistical Analysis of PR distributions across orders\n\nThis script contains the code to generate the statistical plot comparing the gene count distributions across different families. This is done for every PR family. \n\nLoad in all the necessary libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\nlibrary(dbplyr)\nlibrary(tidyverse)\nlibrary(readr)\nlibrary(rotl)\nlibrary(ape)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(cowplot)\nlibrary(RColorBrewer)\nlibrary(taxize) \nlibrary(ape) \nlibrary(viridis)\nlibrary(forcats)\nlibrary(patchwork) \n\nset.seed(123)\n```\n:::\n\n\n## Data preparation\n\n### Inferring Genes from PR family representatives\n\nWe start off by download gene families from PLAZA\n\nThe objects created: families_dicots/monocots contain 3 columns. 1 with the gene id of a specific gene, and the other columns contain the family the gene belongs to, and the species it was found in. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfamilies_dicots <- read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \", show_col_types = FALSE\n)\ncolnames(families_dicots) <- c(\"family\", \"species\", \"gene_id\")\n\nfamilies_monocots <- read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \", show_col_types = FALSE\n)\ncolnames(families_monocots) <- c(\"family\", \"species\", \"gene_id\")\n\nfamilies <- bind_rows(families_dicots, families_monocots)\nhead(families)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  family       species gene_id                               \n  <chr>        <chr>   <chr>                                 \n1 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5579      \n2 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5580      \n3 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5581      \n4 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5582__5583\n5 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5586      \n6 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5587      \n```\n\n\n:::\n:::\n\n\n### Defining the homologous groups\n\nCreating a dataframe that contains all the homologous gene families. We use this to search plaza and collect genes. The objective here is to \"capture\" all genes belonging to the PR families. How these homologous gene families were found is explained in the report. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npr_fam_names <- c(\"PR1\", \"PR2\", \"PR3\", \"PR4\", \"PR5\", \"PR6\", \"PR6\", \"PR6\", \"PR7\", \"PR8\",\n            \"PR9\", \"PR10\",\"PR10\", \"PR11\", \"PR12\", \"PR13\", \"PR14\", \"PR15\",\n            \"PR16\", \"PR17\")\n\nmonocots = data.frame(\n  prfam = pr_fam_names, \n  family =          c(\"HOM05M000176\", # PR1\n                      \"HOM05M000021\", # PR2\n                      \"HOM05M000197\", # PR3\n                      \"HOM05M001261\", # PR4\n                      \"HOM05M000094\", # PR5\n                      \"HOM05M007126\", \"HOM05M000680\",\"HOM05M000792\", # PR6\n                      \"HOM05M000024\", # PR7\n                      \"HOM05M000233\", # PR8\n                      \"HOM05M000005\", # PR9\n                      \"HOM05M000737\",\"HOM05M004276\", # PR10\n                      \"HOM05M002226\", # PR11\n                      \"HOM05M011346\", # PR12\n                      \"HOM05D002484\", # PR13\n                      \"HOM05M000361\", # PR14\n                      \"HOM05M000050\", # PR15\n                      \"HOM05M000050\", # PR16\n                      \"HOM05M001084\") # PR17\n)\n\npr_fam_names <- c(\"PR1\", \"PR2\", \"PR3\", \"PR4\", \"PR5\", \"PR6\", \"PR7\", \"PR8\", \"PR9\", \"PR10\", \"PR11\", \"PR12\", \"PR13\", \"PR14\", \"PR15\",  \"PR16\", \"PR17\")\n\ndicots = data.frame(\n  prfam = pr_fam_names,\n  family = c(\"HOM05D000217\",\n             \"HOM05D000020\",    # PR2\n             \"HOM05D000242\",\n            \"HOM05D002072\",\n            \"HOM05D000102\",\n            \"HOM05D001004\",     # PR6\n            \"HOM05D000015\",     # PR7\n            \"HOM05D000662\",\n            \"HOM05D000044\",\n            \"HOM05D000322\",      # PR10\n            \"HOM05D000741\",\n            \"HOM05D002484\",\n            \"HOM05D007540\",\n            \"HOM05D000275\",     #PR14\n            \"HOM05D000052\",\n            \"HOM05D000052\",\n            \"HOM05D001524\" )\n)\n```\n:::\n\n\nHere we join together the table with the gene ID's and the table with the representative homologous gene families. \nThe result is an extra column that contains whether the gene family is PR1, PR2, ... \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmonocots <- monocots %>%\n  inner_join(families_monocots)\n\ndicots <- dicots %>%\n  inner_join(families_dicots)\n\npr_genes <- bind_rows(monocots, dicots)\n\n# remove family column \npr_genes <- pr_genes %>%\n  select(-family) \n\npr_genes <- unique(pr_genes)\n\nhead(pr_genes)\n```\n:::\n\n\nNow we add extra info about every species. The result is a table with gene ID's, the PR families/species it belong to and extra info. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load species list from a file\nspecies_info <- read_delim(\"C:/Users/wande/Documents/Bioinformatics_2024-2025/Design_project/Design_project_Rsession/data/species_information.csv\", delim = \"\\t\", skip = 2, show_col_types = FALSE)\n\ncolnames(species_info)[1] <- \"species_name\"\nspecies_list <- species_info$common_name\n\npr_genes <- pr_genes |>\n  left_join(species_info, by = c(\"species\" = \"species_name\"))\n\n# Order PR families in ascending order\npr_genes$prfam <- factor(pr_genes$prfam, levels = unique(pr_fam_names))\n```\n:::\n\n\n## Phylogenetic Tree\n\nBuilding the tree for all the species. This is done to extract the order of the species. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree <- ape::read.tree(\"C:/Users/wande/Documents/Bioinformatics_2024-2025/Design_project/Design_project_Rsession/data/Trees/tree_combined.nwk\")\n\n# Generate the tree plot\np_tree <- ggtree(tree) +\n  geom_tiplab(size = 2, align = TRUE, linesize = 0.5) +\n  theme_tree2()\n```\n:::\n\n\n## Gene counts\n\nCreating a table with the gene counts for every family.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract species order\nspecies_order <- rev(ggtree::get_taxa_name(p_tree))\n\n# Ensure species is a factor with the correct order\npr_genes <- pr_genes |> \n  mutate(species = factor(species, levels = species_order))\n\ngene_counts <- pr_genes |>\n dplyr::count(species, prfam) |>\n na.omit()\n\ngene_counts$log_n <- log(gene_counts$n + 1)\n```\n:::\n\n\nAdding taxonomic info to the species. Things like Class, Order,...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load in the metadata\nplaza_metadata <- read.csv(\"C:/Users/wande/Documents/Bioinformatics_2024-2025/Design_project/Design_project_Rsession/data/species_metadata_PLAZA.tsv\", sep = \"\\t\")\n\n# Join gene_counts with plaza_metadata t\ngene_counts_extended <- gene_counts |>\n  left_join(plaza_metadata |> select(species, family, order, class), by = \"species\")\n```\n:::\n\n\n\n## Statistical analysis\n\n### Unfiltered analysis\n\nStart off by creating the function that will perform the statistical test. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Wrapper to compare distributions using Kruskal-Wallis + Dunn\n#'\n#' @param df A data frame with values and variables.\n#' @param var Character, name of column indicating variable levels.\n#' @param value Numeric, values to be used in comparisons.\n#'\n#' @return A data frame with CLD for each level.\n#' @noRd\n#' \ncld_kw_dunn <- function(df, var = \"type\", value = \"csum\") {\n  \n    # Ensure grouping variable is a factor\n    # So we don't get coercing error. \n    df[[var]] <- as.factor(df[[var]])\n    \n    # Perform Kruskal-Wallis test followed by a post-hoc Dunn's test\n    dunn <- FSA::dunnTest(\n        df[[value]] ~ df[[var]], method = \"bh\"\n    ) |>\n        purrr::pluck(\"res\") |>\n        arrange(Z)\n    \n    # Get compact letter display (CLD)\n    cld <- rcompanion::cldList(\n        comparison = dunn$Comparison,\n        p.value = dunn$P.adj,\n        threshold = 0.05\n    )\n    \n    return(cld)\n}\n```\n:::\n\n\n\nPerform the statistical test per order AND PR family. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(purrr)\n\n# Run Dunn's test separately for each PR family\ncld_kw_order_prfam <- gene_counts_extended |>\n  group_split(prfam) |>  # Split data by PR family\n  map_df(~ {\n    cld <- cld_kw_dunn(.x, var = \"order\", value = \"n\")  # Apply function per PR family\n    cld$prfam <- unique(.x$prfam)  # Add PR family info\n    return(cld)\n  })\n\n# rename the order column\ncld_kw_order_prfam <- cld_kw_order_prfam |>\n  rename(order = Group)\n```\n:::\n\n\nCombine the gene counts with the letter codes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_counts_letters <- gene_counts_extended %>%\n  left_join(cld_kw_order_prfam, by = c(\"order\", \"prfam\"))\n```\n:::\n\n\nPreparation for plotting.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- 1. Merge Class Information ---\n# Get unique order-class mapping, renaming 'class' to 'taxon_class' immediately\norder_class_map <- distinct(gene_counts_extended, order, taxon_class = class)\n\n\n\n# Add the 'taxon_class' column to the plotting data\ngene_counts_plot_data <- left_join(gene_counts_letters, order_class_map, by = \"order\")\n\n\nprint(paste(\"Number of rows with non-NA taxon_class after join:\",\n            sum(!is.na(gene_counts_plot_data$taxon_class))))\nif (sum(!is.na(gene_counts_plot_data$taxon_class)) == 0) {\n    warning(\"No orders in 'gene_counts_letters' matched orders in 'gene_counts_extended'. Check 'order' columns.\")\n}\n\n# COMBINE PR15 AND PR16\n# Check if 'prfam' column exists and is a factor before attempting modification\n\nif (!is.factor(gene_counts_plot_data$prfam)) {\n    warning(\"'prfam' column is not a factor before combining. Converting it now.\")\n    gene_counts_plot_data$prfam <- factor(gene_counts_plot_data$prfam)\n}\n\ngene_counts_plot_data <- gene_counts_plot_data %>%\n  mutate(prfam = fct_collapse(prfam, \"PR15/16\" = c(\"PR15\", \"PR16\")))\n\n\n\n# --- 2. Order Factors by Class ---\n# Determine the correct order for the 'order' factor levels using the new column name\norder_levels <- order_class_map %>%\n  filter(!is.na(taxon_class)) %>% # Avoid issues if class is NA in the map\n  arrange(taxon_class, order) %>%\n  pull(order)\n\n# Apply the new factor levels to 'order'\n# Also ensure 'taxon_class' and 'prfam' are factors\ngene_counts_plot_data$order <- factor(gene_counts_plot_data$order, levels = order_levels)\n\n# Use the new name 'taxon_class' here\ngene_counts_plot_data$taxon_class <- factor(gene_counts_plot_data$taxon_class)\n\n\n\n# --- 3. Prepare labels for the letters on the right ---\n# Use the new data frame with ordered factors\nplot_labels <- gene_counts_plot_data %>%\n  group_by(order, prfam) %>%\n  summarise(\n    Letter = first(Letter),\n    .groups = 'drop'\n  ) %>%\n  mutate(y_pos = 0.35)\n\n# --- 4. Define Colors for Classes ---\n# Get unique class names using the new column name\n# Ensure we only get non-NA levels if any NAs exist\nunique_classes <- levels(droplevels(filter(gene_counts_plot_data, !is.na(taxon_class))$taxon_class))\n\n# Check if we found any classes\nif (length(unique_classes) == 0) {\n    warning(\"No valid class levels found for coloring. Did the join work?\")\n    # Define a default color or stop if necessary\n    class_colors <- setNames(\"grey50\", \"default\") # Fallback\n} else {\n   # Use the rainbow() function\n   class_colors <- setNames(rainbow(length(unique_classes)), unique_classes)\n   # --- End of change ---\n}\n```\n:::\n\n#### Plotting of all PR families\n\nCreate the full plot, without filtering on significance. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# --- Create Plot ---\n\np_stat_full <- ggplot(gene_counts_plot_data, aes(x = n, y = 0)) +\n\n  geom_boxplot(aes(fill = taxon_class), # Use taxon_class\n               outlier.shape = NA,\n               alpha = 0.7,\n               show.legend = TRUE) +\n\n  geom_jitter(aes(color = taxon_class), # Use taxon_class\n              height = 0.1,\n              width = 0,\n              alpha = 0.6,\n              size = 1.5,\n              show.legend = FALSE) +\n\n  geom_text(data = plot_labels,\n            aes(label = Letter, x = Inf, y = y_pos),\n            hjust = 1.1,\n            vjust = 0.5,\n            size = 3,\n            check_overlap = TRUE) +\n\n  facet_grid(order ~ prfam, scales = \"free_x\", switch = \"y\") +\n\n  scale_x_continuous(limits = c(0, NA), expand = expansion(mult = c(0.05, 0.18))) +\n\n  # Add Manual Color Scales for Class\n  scale_fill_manual(values = class_colors, name = \"Class\", na.value = \"grey80\") +\n  scale_color_manual(values = class_colors, name = \"Class\", na.value = \"grey80\") +\n\n  theme_classic(base_size = ) +\n\n  theme(\n    axis.text.x = element_text(size = 6),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    strip.text.y.left = element_text(angle = 0, hjust = 1),\n    strip.placement = \"outside\",\n    strip.background = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey90\", linewidth = 0.5),\n    panel.grid.minor.x = element_blank(),\n    panel.spacing.y = unit(0.1, \"lines\"),\n    panel.spacing.x = unit(0.2, \"lines\"),\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.margin = margin(10, 10, 10, 10),\n    legend.position = \"right\"\n  ) +\n\n  labs(\n    x = \"Number of Genes (n)\"\n  )\n\np_stat_full\n```\n:::\n\n### Filtered analysis\n\nNow we'll only keep the PR columns that show significant differences. We will also add the phylogenetic tree showing the evolutionary relationships of the orders plotted on the left. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ngene_counts_plot_data_filtered <- gene_counts_plot_data %>%\n  group_by(prfam) %>%\n  filter(n_distinct(MonoLetter) > 1) %>%\n  ungroup()\n```\n:::\n\n\n\n#### Plotting of filtered PR families\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To make sure only the significant PR families are plotted:\nvalid_prfams <- unique(gene_counts_plot_data_filtered$prfam)\nplot_labels <- plot_labels %>% filter(prfam %in% valid_prfams)\nmax_n <- max(gene_counts_plot_data_filtered$n)\n\n\n# Manually creating the order that we see in the phylogenetic tree:\ntip_order <- c(\n  \"Cucurbitales\", \"Fagales\", \"Rosales\", \"Fabales\", \"Celastrales\", \"Malpighiales\",\n  \"Malvales\", \"Brassicales\", \"Sapindales\", \"Myrtales\", \"Vitales\", \"Dipsacales\",\n  \"Apiales\", \"Asterales\", \"Gentianales\", \"Solanales\", \"Lamiales\", \"Cornales\",\n  \"Ericales\", \"Caryophyllales\", \"Trochodendrales\", \"Proteales\", \"Ranunculales\",\n  \"Ceratophyllales\", \"Magnoliales\", \"Zingiberales\", \"Poales\", \"Arecales\",\n  \"Asparagales\", \"Dioscoreales\", \"Alismatales\", \"Amborellales\", \"Cupressales\",\n  \"Selaginellales\", \"Funariales\", \"Marchantiales\", \"Anthocerotales\", \"Charales\", \"Chlamydomonadales\"\n)\n\n# use that to set your facet‐row factor levels\ngene_counts_plot_data_filtered$order <- \n  factor(gene_counts_plot_data_filtered$order, levels = tip_order)\n\n# 4) Make plot \np_stat_filtered_ordered <- ggplot(gene_counts_plot_data_filtered, aes(x = n, y = 0)) +\n  \n  geom_boxplot(aes(fill = taxon_class, color = taxon_class),  # Use color and fill\n               outlier.shape = NA,\n               alpha = 0.7,\n               show.legend = FALSE) +  #  Important:  FALSE here\n  \n  geom_jitter(aes(color = taxon_class),  #  Use color\n              height = 0.1,\n              width = 0,\n              alpha = 0.6,\n              size = 1.5,\n              show.legend = TRUE) +  #  TRUE here (or in boxplot, but *not* both)\n  \n  geom_text(data = plot_labels,\n            aes(label = Letter, x = Inf, y = y_pos),\n            hjust = 1.1,\n            vjust = 0.5,\n            size = 3,\n            check_overlap = TRUE) +\n  \n  facet_grid(order ~ prfam, scales = \"free_x\", switch = \"y\") +\n  \n  scale_x_continuous(limits = c(0, NA), expand = expansion(mult = c(0.05, 0.18))) +\n  \n  # --- Add Manual Color Scales for Class ---\n  # These scales will now use the rainbow colors defined above\n  scale_fill_manual(values = palette.colors(), name =\"Class\") +\n  scale_color_manual(values = palette.colors(), name =\"Class\") +  #  Crucial:  Same scale for both\n  \n  theme_classic(base_size = ) +\n  \n  theme(\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size = 10),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10), size = 12),\n    strip.text.y.left = element_text(angle = 0, hjust = 0, size = 12),\n    strip.text.x = element_text(size = 12),\n    strip.placement = \"outside\",\n    strip.background = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey90\", linewidth = 0.5),\n    panel.grid.minor.x = element_blank(),\n    panel.spacing.y = unit(0.1, \"lines\"),\n    panel.spacing.x = unit(0.3, \"cm\"),\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.margin = margin(10, 10, 10, 10),\n    legend.position = \"right\",\n  ) +\n  guides(color = guide_legend(override.aes = list(size = 4))) +\n  \n  labs(\n    x = \"Number of genes (n)\"\n  ) +\n   coord_cartesian(clip = \"off\") \n\n# Load in the structure of the Order tree. This tree represents the evolutionary relationships of all the orders that remain in the plot. \ntree_text <- \"((((((((((((((((((Brassicales,Malvales),Sapindales),Myrtales),((((Fagales,Cucurbitales),Rosales),Fabales),(Malpighiales,Celastrales))),Vitales),(((Ericales,Cornales),((Lamiales,(Solanales,Gentianales)),(Asterales,(Apiales,Dipsacales)))),Caryophyllales)),Trochodendrales),Proteales),Ranunculales),Ceratophyllales),Magnoliales),(((((Poales,Zingiberales),Arecales),Asparagales),Dioscoreales),Alismatales)),Amborellales),Cupressales),Selaginellales),(Anthocerotales,(Marchantiales,Funariales))),Charales),(Chlamydomonadales));\"\nphy <- read.tree(text = tree_text)\n\n\n# Make your ggtree plot\np_tree <- ggtree(phy, layout = \"rectangular\") +\n  # drop all margins and axes\n  theme_tree2() +\n  theme(\n    plot.margin = margin(t = 5, r = unit(-30, \"pt\"), b = 5, l = 5),\n    axis.line = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank()\n  )\n\n\n# 4. Combine them with patchwork\n#    Adjust the relative widths so the tree isn’t too tiny\np_combined <- p_tree + p_stat_filtered_ordered + plot_layout(widths = c(0.3, 1))\n\n\np_stat_filtered_ordered_tight <- p_stat_filtered_ordered +\n  theme(plot.margin = unit(c(5.5, 5.5, 5.5, -10), \"pt\")) # Adjust the negative value as needed\n\np_stat_combined <- p_tree + p_stat_filtered_ordered_tight +\n  plot_layout(widths = c(0.3, 1))\n\np_stat_combined\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}