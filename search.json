[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Code and data for “Evolution of pathogenesis-related proteins in plants”",
    "section": "",
    "text": "Preface\nThis book contains all code and data used in the paper “Evolution of pathogenesis-related proteins in plants”, and it is intended to make all analyses fully reproducible.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "chapters/01_identifying_PR_repertoires.html",
    "href": "chapters/01_identifying_PR_repertoires.html",
    "title": "1  Identification of plant PR gene repertoires",
    "section": "",
    "text": "1.1 Obtaining gene repertoires\nAfter a BLAST search against the PLAZA databases (Monocots and Dicots), we found that PR proteins of each family are contained in the following PLAZA gene families.\n# PR family to PLAZA family assignments\npr_monocots &lt;- data.frame(\n  PR = c(\n    \"PR1\", \"PR2\", \"PR3\", \"PR4\", \"PR5\", \"PR6\", \"PR6\", \"PR6\", \"PR7\", \n    \"PR8\", \"PR9\", \"PR10\", \"PR10\", \"PR11\", \"PR12\", \n    \"PR13\", \"PR14\", \"PR15\", \"PR16\", \"PR17\"\n  ),\n  family = c(\n    \"HOM05M000176\", \"HOM05M000021\", \"HOM05M000197\", \"HOM05M001261\",\n    \"HOM05M000094\", \"HOM05M007126\", \"HOM05M000680\",\"HOM05M000792\",\n    \"HOM05M000024\", \"HOM05M000233\", \"HOM05M000005\", \"HOM05M000737\",\n    \"HOM05M004276\", \"HOM05M002226\", \"HOM05M011346\", \"HOM05D002484\",\n    \"HOM05M000361\", \"HOM05M000050\", \"HOM05M000050\", \"HOM05M001084\" \n  )\n)\n\npr_dicots &lt;- data.frame(\n  PR = c(\n    \"PR1\", \"PR2\", \"PR3\", \"PR4\", \"PR5\", \"PR6\", \"PR7\", \"PR8\", \"PR9\", \n    \"PR10\", \"PR11\", \"PR12\", \"PR13\", \"PR14\", \"PR15\",  \"PR16\", \"PR17\"\n  ),\n  family = c(\n    \"HOM05D000217\", \"HOM05D000020\", \"HOM05D000242\", \"HOM05D002072\",\n    \"HOM05D000102\", \"HOM05D001004\", \"HOM05D000015\", \"HOM05D000662\",\n    \"HOM05D000044\", \"HOM05D000322\", \"HOM05D000741\", \"HOM05D002484\",\n    \"HOM05D007540\", \"HOM05D000275\", \"HOM05D000052\", \"HOM05D000052\",\n    \"HOM05D001524\"\n  )\n)\nWe will now use these PLAZA family IDs to find PR repertoires.\n# Read family delineations from PLAZA\nplaza_families &lt;- bind_rows(\n  read_tsv(\n    \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n    comment = \"# \", show_col_types = FALSE,\n  ) |&gt;\n    dplyr::rename(family = 1),\n  read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \", show_col_types = FALSE\n) |&gt;\n  dplyr::rename(family = 1)\n)\n\n# Get PR-encoding genes based on PLAZA IDs\npr_genes &lt;- bind_rows(\n  pr_monocots |&gt; inner_join(plaza_families),\n  pr_dicots |&gt; inner_join(plaza_families)\n) |&gt;\n  select(PR, species, gene_id) |&gt;\n  distinct(.keep_all = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Identification of plant PR gene repertoires</span>"
    ]
  },
  {
    "objectID": "chapters/01_identifying_PR_repertoires.html#frequency-of-pr-encoding-genes-across-species",
    "href": "chapters/01_identifying_PR_repertoires.html#frequency-of-pr-encoding-genes-across-species",
    "title": "1  Identification of plant PR gene repertoires",
    "section": "1.2 Frequency of PR-encoding genes across species",
    "text": "1.2 Frequency of PR-encoding genes across species\nNow, we will visualize the frequency of PR genes (for each PR family) across species. We will first obtain a tree plot to use as phylogenetic context.\n\n# Read tree\ntree &lt;- ape::read.tree(here(\"data\", \"tree_combined.nwk\"))\n\n# Read species metadata\nspecies_meta &lt;- read_tsv(\n  here(\"data\", \"species_metadata_plaza.tsv\"),\n  show_col_types = FALSE\n) |&gt;\n  filter(species %in% tree$tip.label)\n  \ntree &lt;- ape::keep.tip(tree, species_meta$species)\n\n# Replace low-frequency orders with \"Other\"\ntoreplace &lt;- count(species_meta, order) |&gt; filter(n &lt;=3) |&gt; pull(order)\nspecies_meta &lt;- species_meta |&gt;\n  mutate(Order = ifelse(order %in% toreplace, \"Other\", order))\n\n# Plot tree with tips colored by order\np_tree &lt;- ggtree(tree) %&lt;+% species_meta +\n  geom_tippoint(aes(color = Order)) +\n  ggsci::scale_color_d3(\"category20\")\n\nThen, we will plot frequencies of PR genes across species using a heatmap.\n\n# Get counts as a wide matrix and get values scaled by column (PR family)\nscaled_counts &lt;- pr_genes |&gt;\n  dplyr::count(species, PR, .drop = FALSE) |&gt;\n  pivot_wider(\n    names_from = PR, values_from = n, values_fill = 0\n  ) |&gt;\n  column_to_rownames(\"species\") |&gt;\n  as.matrix() |&gt;\n  ComplexHeatmap::pheatmap(scale = \"column\")\n\n# Pivot from wide to long and plot heatmap\np_heatmap &lt;- scaled_counts@matrix |&gt;\n  as.data.frame() |&gt;\n  rownames_to_column(\"species\") |&gt;\n  pivot_longer(\n    names_to = \"PR\", values_to = \"n\", cols = -species\n  ) |&gt;\n  filter(PR != \"PR15\") |&gt;\n  mutate(\n    species = factor(species, levels = rev(get_taxa_name(p_tree))),\n    PR = str_replace_all(PR, \"PR\", \"PR-\"),\n    PR = factor(PR, levels = paste0(\"PR-\", c(1:14, 16, 17)))\n  ) |&gt;\n  ggplot(aes(x = PR, y = species, fill = n)) +\n  geom_tile() +\n  #scale_fill_gradient(low = \"#E5F5E0\", high = \"#006D2C\")\n  scale_fill_viridis_c() +\n  theme_classic() +\n  theme(\n    axis.ticks.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)\n  ) +\n  labs(\n    x = \"PR family\",\n    y = NULL,\n    title = \"Frequency of PR-encoding genes across species\",\n    fill = \"Scaled counts\"\n  )\n\n# Combine tree and heatmap\np_heatmap_final &lt;- wrap_plots(\n  p_tree + theme(legend.position = \"left\"), \n  p_heatmap, \n  widths = c(0.3, 0.7)\n)\n\nSaving the final plot to a PNG file.\n\nggsave(\n  p_heatmap_final, width = 10, height = 9,\n  file = \"heatmap_scaled_counts.png\", dpi = 300\n)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Identification of plant PR gene repertoires</span>"
    ]
  },
  {
    "objectID": "chapters/01_identifying_PR_repertoires.html#session-information",
    "href": "chapters/01_identifying_PR_repertoires.html#session-information",
    "title": "1  Identification of plant PR gene repertoires",
    "section": "1.3 Session information",
    "text": "1.3 Session information\nThis document was created under the following conditions:\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14)\n os       Ubuntu 22.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       Europe/Brussels\n date     2025-05-14\n pandoc   3.2 @ /usr/lib/rstudio/resources/app/bin/quarto/bin/tools/x86_64/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version date (UTC) lib source\n ape            5.8     2024-04-11 [1] CRAN (R 4.4.1)\n aplot          0.2.3   2024-06-17 [1] CRAN (R 4.4.1)\n cli            3.6.3   2024-06-21 [1] CRAN (R 4.4.1)\n colorspace     2.1-0   2023-01-23 [1] CRAN (R 4.4.1)\n digest         0.6.36  2024-06-23 [1] CRAN (R 4.4.1)\n dplyr        * 1.1.4   2023-11-17 [1] CRAN (R 4.4.1)\n evaluate       0.24.0  2024-06-10 [1] CRAN (R 4.4.1)\n fansi          1.0.6   2023-12-08 [1] CRAN (R 4.4.1)\n farver         2.1.2   2024-05-13 [1] CRAN (R 4.4.1)\n fastmap        1.2.0   2024-05-15 [1] CRAN (R 4.4.1)\n forcats      * 1.0.0   2023-01-29 [1] CRAN (R 4.4.1)\n fs             1.6.4   2024-04-25 [1] CRAN (R 4.4.1)\n generics       0.1.3   2022-07-05 [1] CRAN (R 4.4.1)\n ggfun          0.1.5   2024-05-28 [1] CRAN (R 4.4.1)\n ggplot2      * 3.5.1   2024-04-23 [1] CRAN (R 4.4.1)\n ggplotify      0.1.2   2023-08-09 [1] CRAN (R 4.4.1)\n ggtree       * 3.12.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n glue           1.7.0   2024-01-09 [1] CRAN (R 4.4.1)\n gridGraphics   0.5-1   2020-12-13 [1] CRAN (R 4.4.1)\n gtable         0.3.5   2024-04-22 [1] CRAN (R 4.4.1)\n here         * 1.0.1   2020-12-13 [1] CRAN (R 4.4.1)\n hms            1.1.3   2023-03-21 [1] CRAN (R 4.4.1)\n htmltools      0.5.8.1 2024-04-04 [1] CRAN (R 4.4.1)\n htmlwidgets    1.6.4   2023-12-06 [1] CRAN (R 4.4.1)\n jsonlite       1.8.8   2023-12-04 [1] CRAN (R 4.4.1)\n knitr          1.48    2024-07-07 [1] CRAN (R 4.4.1)\n lattice        0.22-6  2024-03-20 [1] CRAN (R 4.4.1)\n lazyeval       0.2.2   2019-03-15 [1] CRAN (R 4.4.1)\n lifecycle      1.0.4   2023-11-07 [1] CRAN (R 4.4.1)\n lubridate    * 1.9.3   2023-09-27 [1] CRAN (R 4.4.1)\n magrittr       2.0.3   2022-03-30 [1] CRAN (R 4.4.1)\n munsell        0.5.1   2024-04-01 [1] CRAN (R 4.4.1)\n nlme           3.1-165 2024-06-06 [1] CRAN (R 4.4.1)\n patchwork    * 1.3.0   2024-09-16 [1] CRAN (R 4.4.1)\n pillar         1.9.0   2023-03-22 [1] CRAN (R 4.4.1)\n pkgconfig      2.0.3   2019-09-22 [1] CRAN (R 4.4.1)\n purrr        * 1.0.2   2023-08-10 [1] CRAN (R 4.4.1)\n R6             2.5.1   2021-08-19 [1] CRAN (R 4.4.1)\n Rcpp           1.0.13  2024-07-17 [1] CRAN (R 4.4.1)\n readr        * 2.1.5   2024-01-10 [1] CRAN (R 4.4.1)\n rlang          1.1.4   2024-06-04 [1] CRAN (R 4.4.1)\n rmarkdown      2.27    2024-05-17 [1] CRAN (R 4.4.1)\n rprojroot      2.0.4   2023-11-05 [1] CRAN (R 4.4.1)\n rstudioapi     0.16.0  2024-03-24 [1] CRAN (R 4.4.1)\n scales         1.3.0   2023-11-28 [1] CRAN (R 4.4.1)\n sessioninfo    1.2.2   2021-12-06 [1] CRAN (R 4.4.1)\n stringi        1.8.4   2024-05-06 [1] CRAN (R 4.4.1)\n stringr      * 1.5.1   2023-11-14 [1] CRAN (R 4.4.1)\n tibble       * 3.2.1   2023-03-20 [1] CRAN (R 4.4.1)\n tidyr        * 1.3.1   2024-01-24 [1] CRAN (R 4.4.1)\n tidyselect     1.2.1   2024-03-11 [1] CRAN (R 4.4.1)\n tidytree       0.4.6   2023-12-12 [1] CRAN (R 4.4.1)\n tidyverse    * 2.0.0   2023-02-22 [1] CRAN (R 4.4.1)\n timechange     0.3.0   2024-01-18 [1] CRAN (R 4.4.1)\n treeio         1.28.0  2024-04-30 [1] Bioconductor 3.19 (R 4.4.1)\n tzdb           0.4.0   2023-05-12 [1] CRAN (R 4.4.1)\n utf8           1.2.4   2023-10-22 [1] CRAN (R 4.4.1)\n vctrs          0.6.5   2023-12-01 [1] CRAN (R 4.4.1)\n withr          3.0.0   2024-01-16 [1] CRAN (R 4.4.1)\n xfun           0.51    2025-02-19 [1] CRAN (R 4.4.1)\n yaml           2.3.9   2024-07-05 [1] CRAN (R 4.4.1)\n yulab.utils    0.2.0   2025-01-29 [1] CRAN (R 4.4.1)\n\n [1] /home/faalm/R/x86_64-pc-linux-gnu-library/4.4\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Identification of plant PR gene repertoires</span>"
    ]
  },
  {
    "objectID": "chapters/02_comparison_of_repertoires_across_orders.html",
    "href": "chapters/02_comparison_of_repertoires_across_orders.html",
    "title": "2  Statistical Analysis of PR distributions across orders",
    "section": "",
    "text": "2.1 Data preparation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Statistical Analysis of PR distributions across orders</span>"
    ]
  },
  {
    "objectID": "chapters/02_comparison_of_repertoires_across_orders.html#data-preparation",
    "href": "chapters/02_comparison_of_repertoires_across_orders.html#data-preparation",
    "title": "2  Statistical Analysis of PR distributions across orders",
    "section": "",
    "text": "2.1.1 Inferring Genes from PR family representatives\nWe start off by download gene families from PLAZA\nThe objects created: families_dicots/monocots contain 3 columns. 1 with the gene id of a specific gene, and the other columns contain the family the gene belongs to, and the species it was found in.\n\nfamilies_dicots &lt;- read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \", show_col_types = FALSE\n)\ncolnames(families_dicots) &lt;- c(\"family\", \"species\", \"gene_id\")\n\nfamilies_monocots &lt;- read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \", show_col_types = FALSE\n)\ncolnames(families_monocots) &lt;- c(\"family\", \"species\", \"gene_id\")\n\nfamilies &lt;- bind_rows(families_dicots, families_monocots)\nhead(families)\n\n# A tibble: 6 × 3\n  family       species gene_id                               \n  &lt;chr&gt;        &lt;chr&gt;   &lt;chr&gt;                                 \n1 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5579      \n2 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5580      \n3 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5581      \n4 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5582__5583\n5 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5586      \n6 HOM05D000001 aag     AagrBONN_evm.TU.Sc2ySwM_344.5587      \n\n\n\n\n2.1.2 Defining the homologous groups\nCreating a dataframe that contains all the homologous gene families. We use this to search plaza and collect genes. The objective here is to “capture” all genes belonging to the PR families. How these homologous gene families were found is explained in the report.\n\npr_fam_names &lt;- c(\"PR1\", \"PR2\", \"PR3\", \"PR4\", \"PR5\", \"PR6\", \"PR6\", \"PR6\", \"PR7\", \"PR8\",\n            \"PR9\", \"PR10\",\"PR10\", \"PR11\", \"PR12\", \"PR13\", \"PR14\", \"PR15\",\n            \"PR16\", \"PR17\")\n\nmonocots = data.frame(\n  prfam = pr_fam_names, \n  family =          c(\"HOM05M000176\", # PR1\n                      \"HOM05M000021\", # PR2\n                      \"HOM05M000197\", # PR3\n                      \"HOM05M001261\", # PR4\n                      \"HOM05M000094\", # PR5\n                      \"HOM05M007126\", \"HOM05M000680\",\"HOM05M000792\", # PR6\n                      \"HOM05M000024\", # PR7\n                      \"HOM05M000233\", # PR8\n                      \"HOM05M000005\", # PR9\n                      \"HOM05M000737\",\"HOM05M004276\", # PR10\n                      \"HOM05M002226\", # PR11\n                      \"HOM05M011346\", # PR12\n                      \"HOM05D002484\", # PR13\n                      \"HOM05M000361\", # PR14\n                      \"HOM05M000050\", # PR15\n                      \"HOM05M000050\", # PR16\n                      \"HOM05M001084\") # PR17\n)\n\npr_fam_names &lt;- c(\"PR1\", \"PR2\", \"PR3\", \"PR4\", \"PR5\", \"PR6\", \"PR7\", \"PR8\", \"PR9\", \"PR10\", \"PR11\", \"PR12\", \"PR13\", \"PR14\", \"PR15\",  \"PR16\", \"PR17\")\n\ndicots = data.frame(\n  prfam = pr_fam_names,\n  family = c(\"HOM05D000217\",\n             \"HOM05D000020\",    # PR2\n             \"HOM05D000242\",\n            \"HOM05D002072\",\n            \"HOM05D000102\",\n            \"HOM05D001004\",     # PR6\n            \"HOM05D000015\",     # PR7\n            \"HOM05D000662\",\n            \"HOM05D000044\",\n            \"HOM05D000322\",      # PR10\n            \"HOM05D000741\",\n            \"HOM05D002484\",\n            \"HOM05D007540\",\n            \"HOM05D000275\",     #PR14\n            \"HOM05D000052\",\n            \"HOM05D000052\",\n            \"HOM05D001524\" )\n)\n\nHere we join together the table with the gene ID’s and the table with the representative homologous gene families. The result is an extra column that contains whether the gene family is PR1, PR2, …\n\nmonocots &lt;- monocots %&gt;%\n  inner_join(families_monocots)\n\ndicots &lt;- dicots %&gt;%\n  inner_join(families_dicots)\n\npr_genes &lt;- bind_rows(monocots, dicots)\n\n# remove family column \npr_genes &lt;- pr_genes %&gt;%\n  select(-family) \n\npr_genes &lt;- unique(pr_genes)\n\nhead(pr_genes)\n\nNow we add extra info about every species. The result is a table with gene ID’s, the PR families/species it belong to and extra info.\n\n# Load species list from a file\nspecies_info &lt;- read_delim(\"C:/Users/wande/Documents/Bioinformatics_2024-2025/Design_project/Design_project_Rsession/data/species_information.csv\", delim = \"\\t\", skip = 2, show_col_types = FALSE)\n\ncolnames(species_info)[1] &lt;- \"species_name\"\nspecies_list &lt;- species_info$common_name\n\npr_genes &lt;- pr_genes |&gt;\n  left_join(species_info, by = c(\"species\" = \"species_name\"))\n\n# Order PR families in ascending order\npr_genes$prfam &lt;- factor(pr_genes$prfam, levels = unique(pr_fam_names))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Statistical Analysis of PR distributions across orders</span>"
    ]
  },
  {
    "objectID": "chapters/02_comparison_of_repertoires_across_orders.html#phylogenetic-tree",
    "href": "chapters/02_comparison_of_repertoires_across_orders.html#phylogenetic-tree",
    "title": "2  Statistical Analysis of PR distributions across orders",
    "section": "2.2 Phylogenetic Tree",
    "text": "2.2 Phylogenetic Tree\nBuilding the tree for all the species. This is done to extract the order of the species.\n\ntree &lt;- ape::read.tree(\"C:/Users/wande/Documents/Bioinformatics_2024-2025/Design_project/Design_project_Rsession/data/Trees/tree_combined.nwk\")\n\n# Generate the tree plot\np_tree &lt;- ggtree(tree) +\n  geom_tiplab(size = 2, align = TRUE, linesize = 0.5) +\n  theme_tree2()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Statistical Analysis of PR distributions across orders</span>"
    ]
  },
  {
    "objectID": "chapters/02_comparison_of_repertoires_across_orders.html#gene-counts",
    "href": "chapters/02_comparison_of_repertoires_across_orders.html#gene-counts",
    "title": "2  Statistical Analysis of PR distributions across orders",
    "section": "2.3 Gene counts",
    "text": "2.3 Gene counts\nCreating a table with the gene counts for every family.\n\n# Extract species order\nspecies_order &lt;- rev(ggtree::get_taxa_name(p_tree))\n\n# Ensure species is a factor with the correct order\npr_genes &lt;- pr_genes |&gt; \n  mutate(species = factor(species, levels = species_order))\n\ngene_counts &lt;- pr_genes |&gt;\n dplyr::count(species, prfam) |&gt;\n na.omit()\n\ngene_counts$log_n &lt;- log(gene_counts$n + 1)\n\nAdding taxonomic info to the species. Things like Class, Order,…\n\n# Load in the metadata\nplaza_metadata &lt;- read.csv(\"C:/Users/wande/Documents/Bioinformatics_2024-2025/Design_project/Design_project_Rsession/data/species_metadata_PLAZA.tsv\", sep = \"\\t\")\n\n# Join gene_counts with plaza_metadata t\ngene_counts_extended &lt;- gene_counts |&gt;\n  left_join(plaza_metadata |&gt; select(species, family, order, class), by = \"species\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Statistical Analysis of PR distributions across orders</span>"
    ]
  },
  {
    "objectID": "chapters/02_comparison_of_repertoires_across_orders.html#statistical-analysis",
    "href": "chapters/02_comparison_of_repertoires_across_orders.html#statistical-analysis",
    "title": "2  Statistical Analysis of PR distributions across orders",
    "section": "2.4 Statistical analysis",
    "text": "2.4 Statistical analysis\n\n2.4.1 Unfiltered analysis\nStart off by creating the function that will perform the statistical test.\n\n#' Wrapper to compare distributions using Kruskal-Wallis + Dunn\n#'\n#' @param df A data frame with values and variables.\n#' @param var Character, name of column indicating variable levels.\n#' @param value Numeric, values to be used in comparisons.\n#'\n#' @return A data frame with CLD for each level.\n#' @noRd\n#' \ncld_kw_dunn &lt;- function(df, var = \"type\", value = \"csum\") {\n  \n    # Ensure grouping variable is a factor\n    # So we don't get coercing error. \n    df[[var]] &lt;- as.factor(df[[var]])\n    \n    # Perform Kruskal-Wallis test followed by a post-hoc Dunn's test\n    dunn &lt;- FSA::dunnTest(\n        df[[value]] ~ df[[var]], method = \"bh\"\n    ) |&gt;\n        purrr::pluck(\"res\") |&gt;\n        arrange(Z)\n    \n    # Get compact letter display (CLD)\n    cld &lt;- rcompanion::cldList(\n        comparison = dunn$Comparison,\n        p.value = dunn$P.adj,\n        threshold = 0.05\n    )\n    \n    return(cld)\n}\n\nPerform the statistical test per order AND PR family.\n\nlibrary(dplyr)\nlibrary(purrr)\n\n# Run Dunn's test separately for each PR family\ncld_kw_order_prfam &lt;- gene_counts_extended |&gt;\n  group_split(prfam) |&gt;  # Split data by PR family\n  map_df(~ {\n    cld &lt;- cld_kw_dunn(.x, var = \"order\", value = \"n\")  # Apply function per PR family\n    cld$prfam &lt;- unique(.x$prfam)  # Add PR family info\n    return(cld)\n  })\n\n# rename the order column\ncld_kw_order_prfam &lt;- cld_kw_order_prfam |&gt;\n  rename(order = Group)\n\nCombine the gene counts with the letter codes\n\ngene_counts_letters &lt;- gene_counts_extended %&gt;%\n  left_join(cld_kw_order_prfam, by = c(\"order\", \"prfam\"))\n\nPreparation for plotting.\n\n# --- 1. Merge Class Information ---\n# Get unique order-class mapping, renaming 'class' to 'taxon_class' immediately\norder_class_map &lt;- distinct(gene_counts_extended, order, taxon_class = class)\n\n\n\n# Add the 'taxon_class' column to the plotting data\ngene_counts_plot_data &lt;- left_join(gene_counts_letters, order_class_map, by = \"order\")\n\n\nprint(paste(\"Number of rows with non-NA taxon_class after join:\",\n            sum(!is.na(gene_counts_plot_data$taxon_class))))\nif (sum(!is.na(gene_counts_plot_data$taxon_class)) == 0) {\n    warning(\"No orders in 'gene_counts_letters' matched orders in 'gene_counts_extended'. Check 'order' columns.\")\n}\n\n# COMBINE PR15 AND PR16\n# Check if 'prfam' column exists and is a factor before attempting modification\n\nif (!is.factor(gene_counts_plot_data$prfam)) {\n    warning(\"'prfam' column is not a factor before combining. Converting it now.\")\n    gene_counts_plot_data$prfam &lt;- factor(gene_counts_plot_data$prfam)\n}\n\ngene_counts_plot_data &lt;- gene_counts_plot_data %&gt;%\n  mutate(prfam = fct_collapse(prfam, \"PR15/16\" = c(\"PR15\", \"PR16\")))\n\n\n\n# --- 2. Order Factors by Class ---\n# Determine the correct order for the 'order' factor levels using the new column name\norder_levels &lt;- order_class_map %&gt;%\n  filter(!is.na(taxon_class)) %&gt;% # Avoid issues if class is NA in the map\n  arrange(taxon_class, order) %&gt;%\n  pull(order)\n\n# Apply the new factor levels to 'order'\n# Also ensure 'taxon_class' and 'prfam' are factors\ngene_counts_plot_data$order &lt;- factor(gene_counts_plot_data$order, levels = order_levels)\n\n# Use the new name 'taxon_class' here\ngene_counts_plot_data$taxon_class &lt;- factor(gene_counts_plot_data$taxon_class)\n\n\n\n# --- 3. Prepare labels for the letters on the right ---\n# Use the new data frame with ordered factors\nplot_labels &lt;- gene_counts_plot_data %&gt;%\n  group_by(order, prfam) %&gt;%\n  summarise(\n    Letter = first(Letter),\n    .groups = 'drop'\n  ) %&gt;%\n  mutate(y_pos = 0.35)\n\n# --- 4. Define Colors for Classes ---\n# Get unique class names using the new column name\n# Ensure we only get non-NA levels if any NAs exist\nunique_classes &lt;- levels(droplevels(filter(gene_counts_plot_data, !is.na(taxon_class))$taxon_class))\n\n# Check if we found any classes\nif (length(unique_classes) == 0) {\n    warning(\"No valid class levels found for coloring. Did the join work?\")\n    # Define a default color or stop if necessary\n    class_colors &lt;- setNames(\"grey50\", \"default\") # Fallback\n} else {\n   # Use the rainbow() function\n   class_colors &lt;- setNames(rainbow(length(unique_classes)), unique_classes)\n   # --- End of change ---\n}\n\n\n2.4.1.1 Plotting of all PR families\nCreate the full plot, without filtering on significance.\n\n# --- Create Plot ---\n\np_stat_full &lt;- ggplot(gene_counts_plot_data, aes(x = n, y = 0)) +\n\n  geom_boxplot(aes(fill = taxon_class), # Use taxon_class\n               outlier.shape = NA,\n               alpha = 0.7,\n               show.legend = TRUE) +\n\n  geom_jitter(aes(color = taxon_class), # Use taxon_class\n              height = 0.1,\n              width = 0,\n              alpha = 0.6,\n              size = 1.5,\n              show.legend = FALSE) +\n\n  geom_text(data = plot_labels,\n            aes(label = Letter, x = Inf, y = y_pos),\n            hjust = 1.1,\n            vjust = 0.5,\n            size = 3,\n            check_overlap = TRUE) +\n\n  facet_grid(order ~ prfam, scales = \"free_x\", switch = \"y\") +\n\n  scale_x_continuous(limits = c(0, NA), expand = expansion(mult = c(0.05, 0.18))) +\n\n  # Add Manual Color Scales for Class\n  scale_fill_manual(values = class_colors, name = \"Class\", na.value = \"grey80\") +\n  scale_color_manual(values = class_colors, name = \"Class\", na.value = \"grey80\") +\n\n  theme_classic(base_size = ) +\n\n  theme(\n    axis.text.x = element_text(size = 6),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    strip.text.y.left = element_text(angle = 0, hjust = 1),\n    strip.placement = \"outside\",\n    strip.background = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey90\", linewidth = 0.5),\n    panel.grid.minor.x = element_blank(),\n    panel.spacing.y = unit(0.1, \"lines\"),\n    panel.spacing.x = unit(0.2, \"lines\"),\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.margin = margin(10, 10, 10, 10),\n    legend.position = \"right\"\n  ) +\n\n  labs(\n    x = \"Number of Genes (n)\"\n  )\n\np_stat_full\n\n\n\n\n2.4.2 Filtered analysis\nNow we’ll only keep the PR columns that show significant differences. We will also add the phylogenetic tree showing the evolutionary relationships of the orders plotted on the left.\n\ngene_counts_plot_data_filtered &lt;- gene_counts_plot_data %&gt;%\n  group_by(prfam) %&gt;%\n  filter(n_distinct(MonoLetter) &gt; 1) %&gt;%\n  ungroup()\n\n\n2.4.2.1 Plotting of filtered PR families\n\n# To make sure only the significant PR families are plotted:\nvalid_prfams &lt;- unique(gene_counts_plot_data_filtered$prfam)\nplot_labels &lt;- plot_labels %&gt;% filter(prfam %in% valid_prfams)\nmax_n &lt;- max(gene_counts_plot_data_filtered$n)\n\n\n# Manually creating the order that we see in the phylogenetic tree:\ntip_order &lt;- c(\n  \"Cucurbitales\", \"Fagales\", \"Rosales\", \"Fabales\", \"Celastrales\", \"Malpighiales\",\n  \"Malvales\", \"Brassicales\", \"Sapindales\", \"Myrtales\", \"Vitales\", \"Dipsacales\",\n  \"Apiales\", \"Asterales\", \"Gentianales\", \"Solanales\", \"Lamiales\", \"Cornales\",\n  \"Ericales\", \"Caryophyllales\", \"Trochodendrales\", \"Proteales\", \"Ranunculales\",\n  \"Ceratophyllales\", \"Magnoliales\", \"Zingiberales\", \"Poales\", \"Arecales\",\n  \"Asparagales\", \"Dioscoreales\", \"Alismatales\", \"Amborellales\", \"Cupressales\",\n  \"Selaginellales\", \"Funariales\", \"Marchantiales\", \"Anthocerotales\", \"Charales\", \"Chlamydomonadales\"\n)\n\n# use that to set your facet‐row factor levels\ngene_counts_plot_data_filtered$order &lt;- \n  factor(gene_counts_plot_data_filtered$order, levels = tip_order)\n\n# 4) Make plot \np_stat_filtered_ordered &lt;- ggplot(gene_counts_plot_data_filtered, aes(x = n, y = 0)) +\n  \n  geom_boxplot(aes(fill = taxon_class, color = taxon_class),  # Use color and fill\n               outlier.shape = NA,\n               alpha = 0.7,\n               show.legend = FALSE) +  #  Important:  FALSE here\n  \n  geom_jitter(aes(color = taxon_class),  #  Use color\n              height = 0.1,\n              width = 0,\n              alpha = 0.6,\n              size = 1.5,\n              show.legend = TRUE) +  #  TRUE here (or in boxplot, but *not* both)\n  \n  geom_text(data = plot_labels,\n            aes(label = Letter, x = Inf, y = y_pos),\n            hjust = 1.1,\n            vjust = 0.5,\n            size = 3,\n            check_overlap = TRUE) +\n  \n  facet_grid(order ~ prfam, scales = \"free_x\", switch = \"y\") +\n  \n  scale_x_continuous(limits = c(0, NA), expand = expansion(mult = c(0.05, 0.18))) +\n  \n  # --- Add Manual Color Scales for Class ---\n  # These scales will now use the rainbow colors defined above\n  scale_fill_manual(values = palette.colors(), name =\"Class\") +\n  scale_color_manual(values = palette.colors(), name =\"Class\") +  #  Crucial:  Same scale for both\n  \n  theme_classic(base_size = ) +\n  \n  theme(\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size = 10),\n    axis.ticks.y = element_blank(),\n    axis.title.y = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10), size = 12),\n    strip.text.y.left = element_text(angle = 0, hjust = 0, size = 12),\n    strip.text.x = element_text(size = 12),\n    strip.placement = \"outside\",\n    strip.background = element_blank(),\n    panel.border = element_blank(),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor.y = element_blank(),\n    panel.grid.major.x = element_line(colour = \"grey90\", linewidth = 0.5),\n    panel.grid.minor.x = element_blank(),\n    panel.spacing.y = unit(0.1, \"lines\"),\n    panel.spacing.x = unit(0.3, \"cm\"),\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.margin = margin(10, 10, 10, 10),\n    legend.position = \"right\",\n  ) +\n  guides(color = guide_legend(override.aes = list(size = 4))) +\n  \n  labs(\n    x = \"Number of genes (n)\"\n  ) +\n   coord_cartesian(clip = \"off\") \n\n# Load in the structure of the Order tree. This tree represents the evolutionary relationships of all the orders that remain in the plot. \ntree_text &lt;- \"((((((((((((((((((Brassicales,Malvales),Sapindales),Myrtales),((((Fagales,Cucurbitales),Rosales),Fabales),(Malpighiales,Celastrales))),Vitales),(((Ericales,Cornales),((Lamiales,(Solanales,Gentianales)),(Asterales,(Apiales,Dipsacales)))),Caryophyllales)),Trochodendrales),Proteales),Ranunculales),Ceratophyllales),Magnoliales),(((((Poales,Zingiberales),Arecales),Asparagales),Dioscoreales),Alismatales)),Amborellales),Cupressales),Selaginellales),(Anthocerotales,(Marchantiales,Funariales))),Charales),(Chlamydomonadales));\"\nphy &lt;- read.tree(text = tree_text)\n\n\n# Make your ggtree plot\np_tree &lt;- ggtree(phy, layout = \"rectangular\") +\n  # drop all margins and axes\n  theme_tree2() +\n  theme(\n    plot.margin = margin(t = 5, r = unit(-30, \"pt\"), b = 5, l = 5),\n    axis.line = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank()\n  )\n\n\n# 4. Combine them with patchwork\n#    Adjust the relative widths so the tree isn’t too tiny\np_combined &lt;- p_tree + p_stat_filtered_ordered + plot_layout(widths = c(0.3, 1))\n\n\np_stat_filtered_ordered_tight &lt;- p_stat_filtered_ordered +\n  theme(plot.margin = unit(c(5.5, 5.5, 5.5, -10), \"pt\")) # Adjust the negative value as needed\n\np_stat_combined &lt;- p_tree + p_stat_filtered_ordered_tight +\n  plot_layout(widths = c(0.3, 1))\n\np_stat_combined",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Statistical Analysis of PR distributions across orders</span>"
    ]
  },
  {
    "objectID": "chapters/get_gene_counts.html",
    "href": "chapters/get_gene_counts.html",
    "title": "3  Data preprocessing for Computational Analysis of gene Family Evolution",
    "section": "",
    "text": "3.1 Download gene families from PLAZA\nfamilies_dicots &lt;- read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_dicots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \"\n)\ncolnames(families_dicots) &lt;- c(\"family\", \"species\", \"gene_id\")\n\nfamilies_monocots &lt;- read_tsv(\n  \"https://ftp.psb.ugent.be/pub/plaza/plaza_public_monocots_05/GeneFamilies/genefamily_data.HOMFAM.csv.gz\", \n  comment = \"# \"\n)\ncolnames(families_monocots) &lt;- c(\"family\", \"species\", \"gene_id\")\n\n# join\nfamilies &lt;- bind_rows(families_dicots, families_monocots)\n\n# get correspondence between dicots and monocots based on gene id\nfamilies_lookup &lt;- families_dicots %&gt;%\n  inner_join(families_monocots, by = c(\"species\", \"gene_id\")) %&gt;%\n  rename(family_dicots = family.x, family_monocots = family.y) %&gt;%\n  select(family_monocots, family_dicots)\n\n# remove duplicates\nfamilies_lookup &lt;- families_lookup[!duplicated(families_lookup), ]\n\nhead(families_lookup)\n\n# A tibble: 6 × 2\n  family_monocots family_dicots\n  &lt;chr&gt;           &lt;chr&gt;        \n1 HOM05M000001    HOM05D000001 \n2 HOM05M001698    HOM05D000001 \n3 HOM05M000725    HOM05D000001 \n4 HOM05M002008    HOM05D000001 \n5 HOM05M000646    HOM05D000001 \n6 HOM05M001340    HOM05D000001\nCount genes per family and species in both dicots and monocots:\ndicots_count &lt;- families_dicots %&gt;%\n  group_by(family, species) %&gt;%\n  summarise(n_genes = n()) %&gt;%\n  ungroup()\n\nhead(dicots_count)\nmonocots_count &lt;- families_monocots %&gt;%\n  group_by(family, species) %&gt;%\n  summarise(n_genes = n()) %&gt;%\n  ungroup()\nhead(monocots_count)\nMatch the lookup table:\n# Join dicots with lookup to get corresponding monocot families\ndicots_joined &lt;- dicots_count %&gt;%\n  rename(family_dicots = family, n_dicots = n_genes) %&gt;%\n  left_join(families_lookup, by = \"family_dicots\")\n\n# Join monocots with lookup to get corresponding dicot families\nmonocots_joined &lt;- monocots_count %&gt;%\n  rename(family_monocots = family, n_monocots = n_genes) %&gt;%\n  left_join(families_lookup, by = \"family_monocots\")\n\n# Full join both to preserve dicot-only, monocot-only, or shared families\ncombined_counts &lt;- full_join(\n  dicots_joined,\n  monocots_joined,\n  by = c(\"species\", \"family_dicots\", \"family_monocots\")\n) %&gt;%\n  select(species, family_monocots, family_dicots, n_monocots, n_dicots)\n\n# Create a table of unique family combinations and assign a stable group ID\nfamily_groups &lt;- combined_counts %&gt;%\n  select(family_dicots, family_monocots) %&gt;%\n  distinct() %&gt;%\n  arrange(family_dicots, family_monocots) %&gt;%\n  mutate(family_group_id = row_number())\n\n# Add family_group_id back to the combined data\ncombined_counts &lt;- combined_counts %&gt;%\n  left_join(family_groups, by = c(\"family_dicots\", \"family_monocots\"))\n\n# View result\nhead(combined_counts)\nSave to csv:\nwrite_csv(combined_counts, \"../data/combined_counts.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data preprocessing for Computational Analysis of gene Family Evolution</span>"
    ]
  },
  {
    "objectID": "chapters/get_gene_counts.html#download-gene-families-from-plaza",
    "href": "chapters/get_gene_counts.html#download-gene-families-from-plaza",
    "title": "3  Data preprocessing for Computational Analysis of gene Family Evolution",
    "section": "",
    "text": "3.1.1 Adding metadata\n\nspecies_metadata &lt;- read.table(\"../data/species_metadata_PLAZA.tsv\", sep = \"\\t\", header=TRUE)\n\npr_genes &lt;- combined_counts |&gt;\n  left_join(species_metadata, by = c(\"species\" = \"species\"))\n\nhead(pr_genes)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data preprocessing for Computational Analysis of gene Family Evolution</span>"
    ]
  },
  {
    "objectID": "chapters/get_gene_counts.html#format-the-phylogenetic-tree",
    "href": "chapters/get_gene_counts.html#format-the-phylogenetic-tree",
    "title": "3  Data preprocessing for Computational Analysis of gene Family Evolution",
    "section": "3.2 Format the phylogenetic tree",
    "text": "3.2 Format the phylogenetic tree\nRead the tree nd remove species not in the gene families:\n\ntree &lt;- readRDS(\"../data/angiowgd_tree.rds\")\n\ntree_phylo &lt;- as.phylo(tree)\n\n# get species list from pr_genes\nspecies_list &lt;- unique(pr_genes$name)\n\nspecies_to_keep_mod &lt;- gsub(\" \", \"_\", species_list)\n\n# compute species in species_to_keep_mod that are not in the tree\nspecies_not_in_tree &lt;- species_to_keep_mod[ ! species_to_keep_mod %in% tree_phylo$tip.label]\n\nspecies_in_tree &lt;- species_to_keep_mod[species_to_keep_mod %in% tree_phylo$tip.label]\nspecies_in_tree &lt;- species_in_tree[order(species_in_tree)]\n\ntips_to_drop &lt;- tree_phylo$tip.label[ ! tree_phylo$tip.label %in% species_to_keep_mod]\nsubset_tree &lt;- drop.tip(tree_phylo, tips_to_drop)\n\nprint(subset_tree)\n\nMake sure the tree is rooted, binary, and ultrametric. Then save the tree in newick format:\n\n# Check current tree properties\ncat(\"Initial tree properties:\\n\")\ncat(\"  Rooted:      \", is.rooted(subset_tree), \"\\n\")\ncat(\"  Binary:      \", is.binary(subset_tree), \"\\n\")\ncat(\"  Ultrametric: \", is.ultrametric(subset_tree), \"\\n\\n\")\n\n# 1. Ensure the tree is rooted\nif (!is.rooted(subset_tree)) {\n  cat(\"Tree is not rooted. Rooting the tree...\\n\")\n  # Here, we're using the first tip as an example outgroup.\n  # Replace with an appropriate outgroup if necessary.\n  subset_tree &lt;- root(subset_tree, outgroup = \"Glycine_max\", resolve.root = TRUE)\n}\n\n# 2. Ensure the tree is binary (fully bifurcating)\nif (!is.binary(subset_tree)) {\n  cat(\"Tree is not binary. Resolving polytomies...\\n\")\n  subset_tree &lt;- multi2di(subset_tree)\n}\n\n# 3. Ensure the tree is ultrametric\nif (!is.ultrametric(subset_tree)) {\n  cat(\"Tree is not ultrametric. Converting tree to ultrametric using chronos...\\n\")\n  # 'chronos' uses a relaxed clock model to produce an ultrametric tree.\n  subset_tree &lt;- chronos(subset_tree)\n}\n\n# Check properties again after processing\ncat(\"\\nProcessed tree properties:\\n\")\ncat(\"  Rooted:      \", is.rooted(subset_tree), \"\\n\")\ncat(\"  Binary:      \", is.binary(subset_tree), \"\\n\")\ncat(\"  Ultrametric: \", is.ultrametric(subset_tree), \"\\n\\n\")\n\n# Save the tree in Newick format\nwrite.tree(subset_tree, file = \"../data/subset_tree.txt\")\ncat(\"Tree saved to 'subset_tree.newick'\\n\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data preprocessing for Computational Analysis of gene Family Evolution</span>"
    ]
  },
  {
    "objectID": "chapters/gene_exp_cont_visualization.html",
    "href": "chapters/gene_exp_cont_visualization.html",
    "title": "4  Visualization of Gene Family Evolution across a phylogenetic tree",
    "section": "",
    "text": "4.1 Read and process CAFE5 output files\nRead the gene increase and decrease data from CAFE5 results:\nclade_data &lt;- read_tsv(\"../cafe5/results cafe/Base_clade_results.txt\", comment = \"#\", col_names = c(\"Taxon_ID\", \"Increase\", \"Decrease\"))\nclade_data$Node &lt;- gsub(\".*&lt;(\\\\d+)&gt;.*\", \"\\\\1\", clade_data$Taxon_ID)\nclade_data$Taxon &lt;- gsub(\"&lt;\\\\d+&gt;\", \"\", clade_data$Taxon_ID)\nclade_data\nRead the tree from CAFE5 results:\n# Read raw lines\nlines &lt;- readLines(\"../cafe5/results cafe/Base_asr.tre\")\n\n# Extract the line starting with \"TREE\"\ntree_line &lt;- grep(\"^\\\\s*TREE\\\\s\", lines, value = TRUE)[1]\n\n# Extract Newick part after the \"=\" sign\nnewick &lt;- sub(\".*=\\\\s*\", \"\", tree_line)\n\n# Optional: save the Newick to a separate file for loading\nwriteLines(newick, \"cafe_tree.nwk\")\n\n# Now read it\ntree &lt;- read.tree(\"cafe_tree.nwk\")\ntree$edge.length &lt;- NULL\np &lt;- ggtree(tree)\nExtract the node labels:\nlabel_table &lt;- data.frame(\n  label = tree$node.label,\n  node = (length(tree$tip.label) + 1):(length(tree$tip.label) + tree$Nnode)\n)\n\n# Extract just the numeric ID from CAFE notation\nlabel_table$cafe_id &lt;- gsub(\".*&lt;(\\\\d+)&gt;.*\", \"\\\\1\", label_table$label)\nLoad pr families results:\npr_families &lt;- read_csv(\"../cafe5/results cafe/pr_cafe_results.csv\")\npr_family_ids &lt;- unique(pr_families$FamilyID)  # Adjust column name if needed\nLoad the gene change data per node and filter to only PR families:\n# This file has changes (Inc/Dec) per family per node\nchange_data &lt;- read_tsv(\"../cafe5/results cafe/Base_change.tab\")\nchange_pr &lt;- change_data %&gt;%\n  filter(FamilyID %in% pr_family_ids)\nFormat the data for the plot and add labels with gene gain and gene loss per node:\n# Exclude 'FamilyID' column, pivot longer\nchange_long &lt;- change_pr %&gt;%\n  pivot_longer(\n    -FamilyID,\n    names_to = \"NodeLabel\",\n    values_to = \"Change\"\n  )\n\nnode_changes &lt;- change_long %&gt;%\n  filter(grepl(\"^&lt;\\\\d+&gt;$\", NodeLabel)) %&gt;%\n  mutate(cafe_id = gsub(\"[&lt;&gt;]\", \"\", NodeLabel)) %&gt;%\n  group_by(cafe_id) %&gt;%\n  summarise(\n    Increase = sum(Change[Change &gt; 0], na.rm = TRUE),\n    Decrease = abs(sum(Change[Change &lt; 0], na.rm = TRUE)),\n    label = paste0(\"+\", Increase, \" / -\", Decrease)\n  )\nnode_changes &lt;- node_changes %&gt;%\n  filter(!(Increase == 0 & Decrease == 0))\n\nannot_nodes &lt;- inner_join(label_table, node_changes, by = \"cafe_id\")\nplot_data &lt;- left_join(p$data, annot_nodes, by = \"node\")\nplot_data$label[plot_data$isTip] &lt;- gsub(\n  \"^([A-Z])[a-z]+_([a-z]+)&lt;\\\\d+&gt;.*$\",\n  \"\\\\1. \\\\2\",\n  plot_data$label[plot_data$isTip]\n)\nplot_data\nAdd metada from PLAZA:\nmetadata &lt;- read_tsv(\"species_metadata_PLAZA.tsv\")\nmetadata &lt;- metadata %&gt;%\n    mutate(label = paste0(substr(word(name, 1), 1, 1), \". \", word(name, 2)))\nhead(metadata)\nplot_data &lt;- left_join(plot_data, metadata %&gt;% select(label, order), by = \"label\")\nplot_data$order &lt;- as.factor(plot_data$order)\nplot_data &lt;- droplevels(plot_data)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization of Gene Family Evolution across a phylogenetic tree</span>"
    ]
  },
  {
    "objectID": "chapters/gene_exp_cont_visualization.html#visualizations",
    "href": "chapters/gene_exp_cont_visualization.html#visualizations",
    "title": "4  Visualization of Gene Family Evolution across a phylogenetic tree",
    "section": "4.2 Visualizations",
    "text": "4.2 Visualizations\n\n4.2.1 PR genes evolution\nFormat the data for plotting:\n\n# Count number of species per order (for tips only)\norder_counts &lt;- plot_data %&gt;%\n  filter(isTip) %&gt;%\n  count(order, name = \"n_species\")\n\n# Replace orders with ≤ 2 species (or NA) with \"Other\"\nplot_data &lt;- plot_data %&gt;%\n  left_join(order_counts, by = \"order\") %&gt;%\n  mutate(order_clean = ifelse(n_species &lt;= 2 | is.na(order), \"Other\", as.character(order))) %&gt;%\n  mutate(order_clean = factor(order_clean))  # recreate factor with clean labels\n\n# Generate up to 20 distinct colors from Set3\nn_orders &lt;- length(unique(plot_data$order_clean))\npalette &lt;- colorRampPalette(RColorBrewer::brewer.pal(12, \"Paired\"))(n_orders)\n\nCreate a expansions/contractions tree of the PR genes:\n\n# ✅ Rename tip labels BEFORE plotting\ntree$tip.label &lt;- gsub(\n  \"^([A-Z])[a-z]+_([a-z]+)&lt;\\\\d+&gt;.*$\",\n  \"\\\\1. \\\\2\",\n  tree$tip.label\n)\n\n# Build the tree and map in data\np &lt;- ggtree(tree, layout = \"fan\") %&lt;+% plot_data +\n  geom_tree(color = \"gray60\", size = 0.3, alpha = 0.7) +\n  theme_tree2()\n\nfinal_plot &lt;- p +\n  geom_tippoint(aes(fill = order_clean), shape = 21, size = 3, color = \"black\") +\n  geom_tiplab(size = 6, color = \"black\", offset = 0.5) +\n  geom_label2(\n    data = plot_data %&gt;% filter(!is.na(label.y)),\n    aes(label = label.y),\n    size = 4,\n    fill = \"white\",\n    color = \"black\",\n    fontface = \"bold\"\n  ) +\n  scale_fill_manual(values = palette, name = \"Order\") +\n  guides(color = guide_legend(override.aes = list(shape = 21, size = 5))) +\n  ggtitle(\"Gene Expansion / Contraction of PR Families\") +\n  theme_tree2() +\n  theme(\n    legend.text = element_text(size = 16),\n    legend.title = element_text(size = 18, face = \"bold\"),\n    plot.title = element_text(size = 24, face = \"bold\", hjust = 0.5)\n  )\n\n\n# Save as PDF\nggsave(\"pr_genes_tree.png\", plot = final_plot, width = 20, height = 20, units = \"in\")\n\n\n\n4.2.2 PR families evolution\nCompute expansion and contraction of PR families per node:\n\n# Join with PRname\nchange_long &lt;- change_long %&gt;%\n  left_join(pr_families %&gt;% select(FamilyID, PRname), by = \"FamilyID\") %&gt;%\n  mutate(NodeLabel = gsub(\".*&lt;(\\\\d+)&gt;.*\", \"\\\\1\", NodeLabel))\n\n# Count number of unique PR families that expand or contract per node\nfamily_change_counts &lt;- change_long %&gt;%\n  filter(grepl(\"^\\\\d+$\", NodeLabel)) %&gt;%\n  mutate(cafe_id = NodeLabel,\n         Direction = case_when(\n           Change &gt; 0 ~ \"Expansion\",\n           Change &lt; 0 ~ \"Contraction\",\n           TRUE ~ \"NoChange\"\n         )) %&gt;%\n  filter(Direction != \"NoChange\") %&gt;%\n  distinct(cafe_id, PRname, Direction) %&gt;%\n  pivot_wider(\n    names_from = Direction,\n    values_from = PRname,\n    values_fn = length,\n    values_fill = 0\n  ) %&gt;%\n  mutate(label = paste0(\"+\", Expansion, \" / -\", Contraction))\n\nPrepare plot data:\n\n# Join with node labels\nannot_families &lt;- inner_join(label_table, family_change_counts, by = \"cafe_id\")\nplot_data_fam &lt;- left_join(p$data, annot_families, by = \"node\")\n\n# Reuse tip labels\nplot_data_fam$label[plot_data_fam$isTip] &lt;- gsub(\n  \"^([A-Z])[a-z]+_([a-z]+)&lt;\\\\d+&gt;.*$\",\n  \"\\\\1. \\\\2\",\n  plot_data_fam$label[plot_data_fam$isTip]\n)\n\n# Add order colors\nplot_data_fam &lt;- left_join(plot_data_fam, metadata %&gt;% select(label, order), by = \"label\")\n\norder_counts &lt;- plot_data_fam %&gt;%\n  filter(isTip) %&gt;%\n  count(order.y, name = \"n_species\")\n\nplot_data_fam &lt;- plot_data_fam %&gt;%\n  left_join(order_counts, by = \"order.y\") %&gt;%\n  mutate(Order = ifelse(n_species.x &lt;= 2 | is.na(order.y), \"Other\", as.character(order.y)),\n         Order = factor(Order))\n\nplot_data_fam\n\nCreate tree visualization for PR families:\n\n# Plot\np_fam &lt;- ggtree(tree, layout = \"fan\") %&lt;+% plot_data_fam +\n  geom_tree(color = \"gray60\", size = 0.3, alpha = 0.7) +\n  theme_tree2()\n\nfinal_plot_fam &lt;- p_fam +\n  geom_tippoint(aes(fill = Order), shape = 21, size = 5, color = \"black\") +\n  geom_tiplab(size = 6, color = \"black\", offset = 0.5) +\n  geom_label2(\n    data = plot_data_fam %&gt;% filter(!is.na(label.y.y)),\n    aes(label = label.y.y),\n    size = 4,\n    fill = \"white\",\n    color = \"black\",\n    fontface = \"bold\"\n  ) +\n  scale_fill_manual(values = palette, name = \"Order\") +\n  guides(color = guide_legend(override.aes = list(shape = 21, size = 6))) +\n  ggtitle(\"Number of PR Gene Families Expanded / Contracted per Node\") +\n  theme_tree2() +\n  theme(\n    legend.text = element_text(size = 16),\n    legend.title = element_text(size = 18, face = \"bold\"),\n    plot.title = element_text(size = 26, face = \"bold\", hjust = 0.5)\n  )\n\nggsave(\"pr_families_tree.png\", plot = final_plot_fam, width = 20, height = 20, units = \"in\")\n\nCreate a summary table of PR family dynamics:\n\n# Summarize per PR family: across nodes\npr_family_dynamics &lt;- change_pr %&gt;%\n  pivot_longer(-FamilyID, names_to = \"NodeLabel\", values_to = \"Change\") %&gt;%\n  left_join(pr_families %&gt;% select(FamilyID, PRname), by = \"FamilyID\") %&gt;%\n  filter(grepl(\"^&lt;\\\\d+&gt;$\", NodeLabel), Change != 0) %&gt;%\n  mutate(\n    Node = gsub(\"[&lt;&gt;]\", \"\", NodeLabel),\n    Direction = if_else(Change &gt; 0, \"Expansion\", \"Contraction\")\n  ) %&gt;%\n  distinct(Node, PRname, Direction) %&gt;%\n  count(PRname, Direction, name = \"NumEvents\") %&gt;%\n  pivot_wider(\n    names_from = Direction,\n    values_from = NumEvents,\n    values_fill = 0\n  )\n\n# Save the table\nwrite_csv(pr_family_dynamics, \"pr_family_dynamics.csv\")\n\n# View result\npr_family_dynamics",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Visualization of Gene Family Evolution across a phylogenetic tree</span>"
    ]
  }
]